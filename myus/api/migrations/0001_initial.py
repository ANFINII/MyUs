# Generated by Django 5.0 on 2024-11-07 19:43

import api.models.base
import api.utils.functions.file
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_quill.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jp_name', models.CharField(max_length=120)),
                ('en_name', models.CharField(max_length=120)),
            ],
            options={
                'verbose_name_plural': '001 カテゴリー',
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='HashTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jp_name', models.CharField(max_length=30)),
                ('en_name', models.CharField(max_length=60)),
            ],
            options={
                'verbose_name_plural': '001 ハッシュタグ',
                'db_table': 'hashtag',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('stripe_product_id', models.CharField(max_length=100)),
                ('price', models.IntegerField()),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'product',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('avatar', models.ImageField(blank=True, default='../static/img/user_icon.png', null=True, upload_to=api.utils.functions.file.user_image)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('username', models.CharField(max_length=20, unique=True)),
                ('nickname', models.CharField(max_length=80, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(auto_now_add=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': '001 User',
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='AccessLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('type', models.CharField(blank=True, max_length=7)),
                ('type_id', models.BigIntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': '002 Access Log',
                'db_table': 'access_log',
                'indexes': [models.Index(fields=['ip_address', 'type', 'type_id'], name='ip_address_type_idx')],
            },
        ),
        migrations.CreateModel(
            name='Advertise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('url', models.URLField()),
                ('content', models.TextField()),
                ('image', models.ImageField(upload_to=api.utils.functions.file.image_upload)),
                ('video', models.FileField(upload_to=api.utils.functions.file.video_upload)),
                ('read', models.IntegerField(default=0)),
                ('type', models.CharField(choices=[('all', '全体'), ('one', '個別')], max_length=3)),
                ('period', models.DateField()),
                ('publish', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '12 広告設定',
                'db_table': 'advertise',
            },
        ),
        migrations.CreateModel(
            name='Comic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('image', models.ImageField(upload_to=api.utils.functions.file.image_upload)),
                ('read', models.IntegerField(default=0)),
                ('publish', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('like', models.ManyToManyField(blank=True, related_name='comic_like', to=settings.AUTH_USER_MODEL)),
                ('hashtag', models.ManyToManyField(blank=True, to='api.hashtag')),
            ],
            options={
                'verbose_name_plural': '03 Comic',
                'db_table': 'comic',
            },
            bases=(models.Model, api.models.base.MediaModel),
        ),
        migrations.CreateModel(
            name='ComicPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=api.utils.functions.file.comic_upload)),
                ('sequence', models.IntegerField()),
                ('comic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comic', to='api.comic')),
            ],
            options={
                'verbose_name_plural': '03 ComicPage',
                'db_table': 'comic_page',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('object_id', models.PositiveIntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('like', models.ManyToManyField(blank=True, related_name='comment_like', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reply', to='api.comment')),
            ],
            options={
                'verbose_name_plural': '13 コメント',
                'db_table': 'comment',
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '10 フォロー',
                'db_table': 'follow',
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('read', models.IntegerField(default=0)),
                ('period', models.DateField()),
                ('publish', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('like', models.ManyToManyField(blank=True, related_name='chat_like', to=settings.AUTH_USER_MODEL)),
                ('hashtag', models.ManyToManyField(blank=True, to='api.hashtag')),
            ],
            options={
                'verbose_name_plural': '06 Chat',
                'db_table': 'chat',
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('richtext', models.TextField()),
                ('delta', django_quill.fields.QuillField()),
                ('image', models.ImageField(upload_to=api.utils.functions.file.image_upload)),
                ('read', models.IntegerField(default=0)),
                ('publish', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('like', models.ManyToManyField(blank=True, related_name='blog_like', to=settings.AUTH_USER_MODEL)),
                ('hashtag', models.ManyToManyField(blank=True, to='api.hashtag')),
            ],
            options={
                'verbose_name_plural': '05 Blog',
                'db_table': 'blog',
            },
            bases=(models.Model, api.models.base.MediaModel),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('delta', django_quill.fields.QuillField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message', to='api.chat')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reply', to='api.message')),
            ],
            options={
                'verbose_name_plural': '14 メッセージ',
                'db_table': 'message',
            },
        ),
        migrations.CreateModel(
            name='Music',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('lyric', models.TextField(blank=True)),
                ('music', models.FileField(upload_to=api.utils.functions.file.musics_upload)),
                ('read', models.IntegerField(default=0)),
                ('download', models.BooleanField(default=True)),
                ('publish', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('hashtag', models.ManyToManyField(blank=True, to='api.hashtag')),
                ('like', models.ManyToManyField(blank=True, related_name='music_like', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '02 Music',
                'db_table': 'music',
            },
            bases=(models.Model, api.models.base.MediaModel),
        ),
        migrations.CreateModel(
            name='MyPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('banner', models.ImageField(blank=True, default='../static/img/MyUs_banner.png', null=True, upload_to=api.utils.functions.file.user_image)),
                ('email', models.EmailField(blank=True, max_length=255)),
                ('content', models.TextField(blank=True)),
                ('follower_count', models.IntegerField(default=0, verbose_name='follower')),
                ('following_count', models.IntegerField(default=0, verbose_name='follow')),
                ('tag_manager_id', models.CharField(blank=True, max_length=10)),
                ('is_advertise', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '001 MyPage',
                'db_table': 'user_mypage',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_no', models.IntegerField()),
                ('type_name', models.CharField(blank=True, max_length=7)),
                ('object_id', models.PositiveIntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('confirmed', models.ManyToManyField(blank=True, related_name='confirmed', to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('deleted', models.ManyToManyField(blank=True, related_name='deleted', to=settings.AUTH_USER_MODEL)),
                ('user_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_from', to=settings.AUTH_USER_MODEL)),
                ('user_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_to', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '11 通知確認',
                'db_table': 'notification',
            },
        ),
        migrations.CreateModel(
            name='Picture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('image', models.ImageField(upload_to=api.utils.functions.file.image_upload)),
                ('read', models.IntegerField(default=0)),
                ('publish', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('hashtag', models.ManyToManyField(blank=True, to='api.hashtag')),
                ('like', models.ManyToManyField(blank=True, related_name='picture_like', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '04 Picture',
                'db_table': 'picture',
            },
            bases=(models.Model, api.models.base.MediaModel),
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('stripe_api_id', models.CharField(max_length=30)),
                ('price', models.IntegerField(default=0)),
                ('max_advertise', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': '001 Plan',
                'db_table': 'plan',
                'indexes': [models.Index(fields=['stripe_api_id'], name='stripe_api_idx')],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=50)),
                ('first_name', models.CharField(max_length=50)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('0', '男性'), ('1', '女性'), ('2', '秘密')], max_length=1)),
                ('phone', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='電話番号は090-1234-5678の形式で入力する必要があります。最大15桁まで入力できます', regex='\\d{2,4}-?\\d{2,4}-?\\d{3,4}')])),
                ('country_code', models.CharField(default='JP', max_length=255)),
                ('postal_code', models.CharField(blank=True, max_length=255)),
                ('prefecture', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=255)),
                ('street', models.CharField(blank=True, max_length=255)),
                ('introduction', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '001 profile',
                'db_table': 'user_profile',
            },
        ),
        migrations.CreateModel(
            name='SearchTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.IntegerField(default=20, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('name', models.CharField(max_length=30)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '08 検索タグ',
                'db_table': 'searchtag',
            },
        ),
        migrations.CreateModel(
            name='Todo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('priority', models.CharField(choices=[('danger', '高'), ('success', '普通'), ('info', '低')], max_length=10)),
                ('progress', models.CharField(choices=[('0', '未着手'), ('1', '進行中'), ('2', '完了')], max_length=10)),
                ('duedate', models.DateField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '07 ToDo',
                'db_table': 'todo',
            },
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_video', models.BooleanField(default=False)),
                ('is_music', models.BooleanField(default=False)),
                ('is_comic', models.BooleanField(default=False)),
                ('is_picture', models.BooleanField(default=False)),
                ('is_blog', models.BooleanField(default=False)),
                ('is_chat', models.BooleanField(default=False)),
                ('is_follow', models.BooleanField(default=True)),
                ('is_reply', models.BooleanField(default=True)),
                ('is_like', models.BooleanField(default=True)),
                ('is_views', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '001 通知設定',
                'db_table': 'user_notification',
            },
        ),
        migrations.CreateModel(
            name='UserPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_id', models.CharField(max_length=255)),
                ('subscription', models.CharField(max_length=255)),
                ('is_paid', models.BooleanField(default=False)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('plan', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='api.plan')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_plan', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '001 UserPlan',
                'db_table': 'user_plan',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('image', models.ImageField(upload_to=api.utils.functions.file.image_upload)),
                ('video', models.FileField(upload_to=api.utils.functions.file.video_upload)),
                ('convert', models.FileField(upload_to=api.utils.functions.file.video_upload)),
                ('read', models.IntegerField(default=0)),
                ('publish', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('hashtag', models.ManyToManyField(blank=True, to='api.hashtag')),
                ('like', models.ManyToManyField(blank=True, related_name='video_like', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '01 Video',
                'db_table': 'video',
            },
            bases=(models.Model, api.models.base.MediaModel),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='email_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='username_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['nickname'], name='nickname_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['parent'], name='comment_parent_idx'),
        ),
        migrations.AddIndex(
            model_name='follow',
            index=models.Index(fields=['follower'], name='follower_idx'),
        ),
        migrations.AddIndex(
            model_name='follow',
            index=models.Index(fields=['following'], name='following_idx'),
        ),
        migrations.AddIndex(
            model_name='follow',
            index=models.Index(fields=['follower', 'following'], name='follower_following_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['parent'], name='message_parent_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user_from', 'user_to'], name='notification_from_to_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['type_no', 'object_id'], name='notification_type_object_idx'),
        ),
    ]
